version: '3.8'

services:
  # Service Frontend Next.js
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: emotionnel-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_URL=https://api.e-motionnel.fr
    depends_on:
      - api
    networks:
      - emotionnel-network

  # Service Backend NestJS
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: emotionnel-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/emotionnel
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_SECRET=${REFRESH_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - FRONTEND_URL=https://e-motionnel.fr
    depends_on:
      - postgres
      - redis
    networks:
      - emotionnel-network

  # Service Worker pour les tâches asynchrones
  worker:
    build:
      context: ./api
      dockerfile: Dockerfile.worker
    container_name: emotionnel-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/emotionnel
      - REDIS_URL=redis://redis:6379
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - emotionnel-network

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: emotionnel-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=emotionnel
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"  # Port modifié pour éviter les conflits
    networks:
      - emotionnel-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: emotionnel-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - emotionnel-network

  # Reverse Proxy Nginx
  nginx:
    image: nginx:stable-alpine
    container_name: emotionnel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/www:/var/www/html
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - emotionnel-network

  # Service de monitoring Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: emotionnel-prometheus
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - emotionnel-network

  # Service de visualisation Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: emotionnel-grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - emotionnel-network

networks:
  emotionnel-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
